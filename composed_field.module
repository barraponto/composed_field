<?php
/**
 * @file
 * Defines composed field type.
 */

/**
 * Implements hook_field_info().
 */
function composed_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'composed_field' => array(
      'label' => t('Composed field'),
      'description' => t('This field stores serialized array in the database.'),
      'default_widget' => 'composed_field_widget',
      'default_formatter' => 'composed_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function composed_field_field_widget_info() {
  return array(
    'composed_field_widget' => array(
      'label' => t('Composed field'),
      'field types' => array('composed_field'),
      // 'settings' => array('rows' => 5),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function composed_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'composed_field_formatter' => array(
      'label' => t('Composed field'),
      'field types' => array('composed_field'),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function composed_field_field_is_empty($item, $field) {
  //return empty($item['rgb']);
  
  // TODO:
  return FALSE;
  
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Updates the widget form on each Ajax callback.
 */
function composed_field_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  // Work only on field of type composed_field and when the form has been
  // submitted.
  if ($form['#field']['type'] == 'composed_field' &&
      isset($form_state['values']['instance']['widget']['settings'])) {

    $form_widget = $form['instance']['widget']['settings'];
    $widget_form_field_values = $form_state['values']['instance']['widget']['settings'];

    // Build the form elements in each tab.
    $form_widget['#composed_field']['vertical_tab_settings'] = array(
      'subfield_start_from' => 1,
      'number_of_subfields' => $widget_form_field_values['number_of_subfields'],
      'tab_element_is_disabled' => FALSE,
      'number_of_fields_not_set_message' => '',
      'tab_value_element_is_enabled' => FALSE,
      'widget_form_field_values_are_set' => TRUE,
    );

    _composed_field_build_form_controls_in_vertical_tabs($form_widget, $widget_form_field_values);
      
    // Return the updated form.
    $form['instance']['widget']['settings'] = $form_widget;
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function composed_field_field_widget_settings_form($field, $instance) {
  $widget_form_field_values = $instance['widget']['settings'];
  // Assume this field is being created.
  $widget_form_field_values_are_set = FALSE;
  // All the elements start off disabled.
  $tab_element_is_disabled = TRUE;

  $number_of_subfields_title = t('Number of subfields');

  // Assume there is no value set for number_of_subfields as yet.
  $number_of_fields_not_set_message = t('You must enter a value into !number_of_subfields', array('!number_of_subfields' => $number_of_subfields_title));

  if (isset($widget_form_field_values['number_of_subfields'])) {
    // This is not a field creationg.
    $number_of_subfields = $widget_form_field_values['number_of_subfields'];
    $widget_form_field_values_are_set = TRUE;
    // All the elements start off enabled.
    $tab_element_is_disabled = FALSE;
  }
  else {
    $widget_form_field_values['number_of_subfields'] = '';
    $number_of_subfields = 1;
  }

  $form['inline'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display as inline element'),
    '#default_value' => (empty($widget_form_field_values['inline'])) ? FALSE : $widget_form_field_values['inline'],
  );

  // This element determines how many components our field will have.
  $form['number_of_subfields'] = array(
    '#type' => 'textfield',
    '#title' => $number_of_subfields_title,
    '#description' => t('Enter a numeric value and hit the tab key after that.') . '<br />' .
      t('This value determines how many subfields this field will have.'),
    '#default_value' => $widget_form_field_values['number_of_subfields'],
    '#maxlength' => 2,
    '#size' => 2,
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => '_composed_field_vertical_tabs_ajax_callback',
    ),
  );

  $form['composed_field'] = array(
    '#type' => 'vertical_tabs',
    '#prefix' => "<div id='composed_field_tabs_ajax_wrapper'>",
    '#suffix' => '</div>',
  );

  // Build the form elements in each tab.
  $form['#composed_field'] = array(
    'vertical_tab_settings' => array(
      'subfield_start_from' => 1,
      'number_of_subfields' => $number_of_subfields,
      'tab_element_is_disabled' => $tab_element_is_disabled,
      'number_of_fields_not_set_message' => $number_of_fields_not_set_message,
      'tab_value_element_is_enabled' => FALSE,
      'widget_form_field_values_are_set' => $widget_form_field_values_are_set,
    ),
    'form_controls' => _composed_field_form_controls_api(),
  );
  
  _composed_field_build_form_controls_in_vertical_tabs($form, $widget_form_field_values);
  
  //'#default_value' => list_allowed_values_string(empty($settings[$subfield]['select']['allowed_values']) ? array() : $settings[$subfield]['select']['allowed_values']),

  return $form;
}

/**
 * AJAX callback from number_of_fields widget form element.
 */
function _composed_field_vertical_tabs_ajax_callback($form, $form_state) {
  $form_widget = $form['instance']['widget']['settings'];

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#composed_field_tabs_ajax_wrapper", render($form_widget['composed_field'])),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function composed_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {



  return $element;
}


/**
 * Form Control Attributes.
 *
 * @see http://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7
 *
 * @return Array
 *   Associative arraay of the form controls api structure.
 */
function _composed_field_form_controls_api() {
  include_once('includes/composed_field.form.controls.inc');
  return $form_controls;
}


/**
 * Builds the vertical tabs.
 *
 * @param Array $form
 *   The widget settings form.
 * @param Array $widget_form_field_values
 *   It is either the form saved values or the form submitted values.
 */
function _composed_field_build_form_controls_in_vertical_tabs(&$form, $widget_form_field_values) {

  foreach($form['#composed_field']['form_controls'] as $attribute_name => $form_control_structure) {

    // The Form API wont allow form element names starting with #, so we add a _
    // before the form control attribute name.
    $tab_name = str_replace('#', '', $attribute_name);

    // Set a vertical tab for each form control attribute.
    $form['composed_field'][$tab_name] = array(
      '#title' => $attribute_name,
      '#type' => 'fieldset',
      '#description' => t('See !form_controls for more details.',
        array('!form_controls' => l(t('Form Controls'),
        'http://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7',
        array('attributes' => array('target' => '_blank'))))
      ),
      '#attributes' => array('id' => array("composed_field_tab_$tab_name-ajax_wrapper")),
      //'#prefix' => "<span id='composed_field_tab_$tab_name-ajax_wrapper'>",
      //'#suffix' => '</span>',
    );
   
    $form['#composed_field']['vertical_tab_settings']['attribute_name'] = $attribute_name;
    $form['#composed_field']['vertical_tab_settings']['tab_name'] = $tab_name;
    // Build the tab elements.
    _composed_field_build_vertical_tab_elements($form, $widget_form_field_values, $form_control_structure);
  }
}

/**
 * Populates each vertical tab with their form elements.
 * 
 * @param Array $form
 *   The widget settings form.
 * @param Array $widget_form_field_values
 *   It is either the form saved values or the form submitted values.
 * @param Array $form_control_structure
 *   The form element's structure.
 */
function _composed_field_build_vertical_tab_elements(&$form, $widget_form_field_values, $form_control_structure) {
 
  /*$file = "/tmp/test.txt";
  // Open the file to get existing content
  $current = file_get_contents($file);
  // Append a new person to the file
  $current .= "$caller" . print_r($form['#composed_field']['vertical_tab_settings'], TRUE);
  // Write the contents back to the file
  file_put_contents($file, $current);*/

  foreach ($form['#composed_field']['vertical_tab_settings'] as $setting_name => $setting_value) {
    ${$setting_name} = $setting_value;
  }

  // Create as many form elements in each tab as there are subfields.
  for ($subfield = $subfield_start_from;
       $subfield <= $number_of_subfields;
       $subfield++) {

    $form['composed_field'][$tab_name][$subfield] = array(
      '#type' => 'fieldset',
    );
 
    foreach($form_control_structure['widget_form'] as $form_element => $form_element_properties) {
      // Inicial state of all form elements.
      $form_element_properties['#disabled'] = $tab_element_is_disabled;

      switch($attribute_name) {
        case '#type':
          if ($tab_element_is_disabled) {
            // The user hasn't entered a value into Number of subfields as yet.
            $form_element_properties['#options'] = array('' => $number_of_fields_not_set_message);
          }
        break;
        case '#default_value':
          // This is the last Form Control attribute in the tab list.
        break;
        default:
          if ($widget_form_field_values_are_set) {
            $tab_value_element_is_enabled = $widget_form_field_values['composed_field'][$tab_name][$subfield]['enabled'];
          }
          $form['composed_field'][$tab_name][$subfield]['enabled'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable !attribute attribute for Subfield !subfield.', array('!attribute' => $attribute_name, '!subfield' => $subfield)),
            '#disabled' => $tab_element_is_disabled,
            '#default_value' => $tab_value_element_is_enabled,
            '#ajax' => array(
              'callback' => '_composed_field_vertical_tabs_ajax_callback',
            ),
          );
      }

      // Get default value from $instance['widget']['settings'].
      $form_element_properties['#default_value'] = $number_of_fields_not_set_message;
      if ($widget_form_field_values_are_set) {
        $form_element_properties['#default_value'] = $widget_form_field_values['composed_field'][$tab_name][$subfield][$form_element];
      }

      // Check if this is the element that holds the form control property
      // value.
      if ($form_element == 'value') {
        // Set title.
        $title = (empty($form_element_properties['#title'])) ? '' : $form_element_properties['#title'];
        $form_element_properties['#title'] = $title . t('Subfield !subfield', array('!subfield' => $subfield));
        
        if (!$tab_value_element_is_enabled && $attribute_name != '#type') {
          $form_element_properties['#disabled'] = TRUE; 
        }

        // Make sure $number_of_fields_not_set_message is not left on
        // #default_value.
        if (isset($form['composed_field'][$tab_name][$subfield]['enabled']) &&
            !$form['composed_field'][$tab_name][$subfield]['enabled']['#disabled'] &&
            !$form['composed_field'][$tab_name][$subfield]['enabled']['#default_value']) {
          $form_element_properties['#default_value'] = '';
        }

        // Check if #type element's values have been set.
        if (!empty($widget_form_field_values['composed_field']['type'][$subfield]['value'])) {
          
          if ($tab_name != 'type') {

            $selected_value_for_type = $widget_form_field_values['composed_field']['type'][$subfield]['value'];
  
            // Check if current form control attribute supportes the selected
            // value on the corresponded subfield #type attribute.
            if (!in_array($selected_value_for_type, $form_control_structure['supported_types'])) {
              $form['composed_field'][$tab_name][$subfield]['enabled']['#disabled'] = TRUE;
            }
          }
        }
        else {
          // The #type element value hasn't been selected.
          $form['composed_field'][$tab_name][$subfield]['enabled']['#disabled'] = TRUE;
        }
      }

      $form['composed_field'][$tab_name][$subfield][$form_element] = $form_element_properties;
    }
  }
}


